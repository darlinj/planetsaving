name: build and deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}

jobs:
  build-test-frontend:
    name: build-test-frontend
    runs-on: ubuntu-latest
    environment: test

    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-node@v4.0.3

      - name: Build frontend
        run: |
          cd frontend
          sed "s|PLACEHOLDER|${{ vars.API_URL }}|g" ./src/api/url_template.json  > ./src/api/url.json
          npm install
          npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-test-build
          path: frontend/dist/
  build-production-frontend:
    name: build-production-frontend
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-node@v4.0.3

      - name: Build frontend
        run: |
          cd frontend
          sed "s|PLACEHOLDER|${{ vars.API_URL }}|g" ./src/api/url_template.json  > ./src/api/url.json
          npm install
          npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-production-build
          path: frontend/dist/
  unit-test:
    name: unit-test
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-node@v4.0.3
      - name: test frontend
        run: |
          cd frontend
          npm ci
          npm run test-ci
      - name: test backend
        run: |
          cd backend
          npm install
          npm run migration
          npm run test_once
  deploy-test-frontend:
    name: deploy-test-frontend
    needs: [build-test-frontend, unit-test, deploy-test-backend]
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/download-artifact@v4
        with:
          name: frontend-test-build
          path: frontend/dist/
      - name: Deploy to test
        run: |
          aws --version
          echo "Using terraform state in s3://${{ vars.S3_TEST_BUCKET }}"
          aws s3 sync frontend/dist s3://${{ vars.S3_TEST_BUCKET }} --exclude index.html
          aws s3 sync frontend/dist s3://${{ vars.S3_TEST_BUCKET }} --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache
  deploy-production-frontend:
    name: deploy-production-frontend
    needs: [build-production-frontend, deploy-production-backend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/download-artifact@v4
        with:
          name: frontend-production-build
          path: frontend/dist/
      - name: Deploy to production
        run: |
          aws --version
          echo "Using terraform state in s3://${{ vars.S3_TEST_BUCKET }}"
          aws s3 sync frontend/dist s3://${{ vars.S3_TEST_BUCKET }} --exclude index.html
          aws s3 sync frontend/dist s3://${{ vars.S3_TEST_BUCKET }} --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache
  deploy-common-infrastructure:
    name: deploy-common-infrastructure
    runs-on: ubuntu-latest
    outputs:
      db-host: ${{ steps.db-host-details.outputs.DB_HOST }}
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: ./.github/actions/deploy_infrastructure
        with:
          environment: "common"
      - name: Save database details
        id: db-host-details
        run: |
          grep DB_HOST infrastructure/common/database.env >> "$GITHUB_OUTPUT"
          echo "DB_HOST=${DB_HOST}"
  migrate-test-database:
    name: migrate-test-database
    needs: [deploy-common-infrastructure]
    environment: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: ./.github/actions/migrate_database
        with:
          db_host: ${{needs.deploy-common-infrastructure.outputs.db-host}}
          environment: test
  migrate-production-database:
    name: migrate-production-database
    needs: [e2e-test]
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: ./.github/actions/migrate_database
        with:
          db_host: ${{needs.deploy-common-infrastructure.outputs.db-host}}
          environment: production
  deploy-test-backend:
    name: deploy-test-backend
    needs: [deploy-common-infrastructure, migrate-test-database]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: ./.github/actions/deploy_infrastructure
        env:
          TF_VAR_db_host: ${{needs.deploy-common-infrastructure.outputs.db-host}}
        with:
          environment: "test"
      - uses: actions/upload-artifact@v4
        with:
          name: uploaded-lambda-zip
          path: infrastructure/api/apollo-server.zip
  deploy-production-backend:
    name: deploy-production-backend
    needs: [deploy-common-infrastructure, migrate-production-database]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: ./.github/actions/deploy_infrastructure
        env:
          TF_VAR_db_host: ${{needs.deploy-common-infrastructure.outputs.db-host}}
        with:
          environment: "production"
      - uses: actions/upload-artifact@v4
        with:
          name: uploaded-lambda-zip
          path: infrastructure/api/apollo-server.zip
  e2e-test:
    name: e2e-test
    needs: [deploy-test-frontend, migrate-test-database]
    environment: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-node@v4.0.3
      - name: install testcafe
        env:
          NODE_ENV: test
          FRONTEND_URL: ${{ vars.FRONTEND_URL }}
          API_URL: ${{ vars.API_URL }}
        run: |
          npm install
          npx testcafe chrome:headless ./e2e_tests -e

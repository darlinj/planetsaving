variables:
  NODE_VERSION: "gallium"

stages:
  - build
  - test
  - common_infra_deploy
  - end_to_end_test
  - production_infrastructure
  - deploy

.build_frontend:
  image:
    name: node:${NODE_VERSION}-alpine
  stage: build
  script:
    - echo "Building frontend"
    - cd frontend
    - sed "s|PLACEHOLDER|${API_URL}|g" ./src/api/url_template.json  > ./src/api/url.json
    - npm install
    - npm run build

build_test_frontend:
  extends: .build_frontend
  environment:
    name: test
  after_script:
    - cd frontend
    - mv build test_build
  artifacts:
    paths:
      - frontend/test_build/

build_backend:
  stage: build
  image:
    name: node:${NODE_VERSION}-alpine
  script:
    - echo "Building backend"
    - cd backend
    - npm install
  artifacts:
    paths:
      - backend/node_modules/

build_prod_frontend:
  extends: .build_frontend
  environment:
    name: production
  after_script:
    - cd frontend
    - mv build prod_build
  artifacts:
    paths:
      - frontend/prod_build/

unittest_frontend:
  needs: []
  image:
    name: node:${NODE_VERSION}-alpine
  variables:
    CI: "true"
  stage: test
  script:
    - cd frontend
    - npm ci
    - npm run test-ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  after_script:
    - echo "Test report available here - https://gitlab.com/joe.darling/footprint/-/jobs/$CI_JOB_ID/artifacts/frontend/coverage/lcov-report/index.html"
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - frontend/coverage/
    reports:
      junit: frontend/coverage/junit.xml

deploy_frontend_to_test:
  stage: end_to_end_test
  needs:
    - "build_test_frontend"
    - "deploy_test_infrastructure"
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  environment:
    name: test
  script:
    - aws --version
    - aws s3 sync frontend/test_build s3://$S3_TEST_BUCKET --exclude index.html
    - aws s3 sync frontend/test_build s3://$S3_TEST_BUCKET --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache

run_e2e_tests:
  stage: end_to_end_test
  needs:
    - "deploy_test_infrastructure"
    - "deploy_frontend_to_test"
  variables:
    NODE_ENV: test
  image:
    name: testcafe/testcafe:2.0.2
    entrypoint: [""]
  environment:
    name: test
  script:
    - npm install
    - /opt/testcafe/docker/testcafe-docker.sh firefox:headless,chromium e2e_tests/ -e

deploy_to_production:
  stage: deploy
  needs:
    - "deploy_production_infrastucture"
    - "build_prod_frontend"
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  environment:
    name: production
  script:
    - aws --version
    - aws s3 sync frontend/prod_build s3://$S3_BUCKET --exclude index.html
    - aws s3 sync frontend/prod_build s3://$S3_BUCKET --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache

.migrate database:
  image:
    name: darlinj/sequelize-cli-iam-auth
  before_script:
    - export RDSHOST=${DB_HOST}
    - export PGUSERNAME=db_user
    - export PGPASSWORD="$(aws rds generate-db-auth-token --hostname $RDSHOST --port 5432 --region $AWS_DEFAULT_REGION --username $PGUSERNAME )"
    - cd backend
    - npm i -g sequelize-cli
    - npm i

migrate_test_infrastructure:
  extends: ".migrate database"
  stage: end_to_end_test
  script:
    - echo "Migrate database"
    - export NODE_ENV=test
    # - sequelize-cli db:create
    - sequelize-cli db:migrate

migrate_production_infrastructure:
  extends: ".migrate database"
  stage: production_infrastructure
  script:
    - echo "Migrate database"
    - export NODE_ENV=production
    # - sequelize-cli db:create
    - sequelize-cli db:migrate

common_infrastructure:
  extends: ".deploy_infrastructure"
  stage: common_infra_deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo  ${AWS_ACCESS_KEY_ID}
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform --version
    - terraform -chdir=infrastructure/common init
    - terraform -chdir=infrastructure/common validate
    - terraform -chdir=infrastructure/common plan -out "planfile"
    - terraform -chdir=infrastructure/common apply -input=false "planfile"
    - cat infrastructure/common/database.env
  artifacts:
    reports:
      dotenv: infrastructure/common/database.env

set_up_database_roles:
  stage: common_infra_deploy
  image:
    name: governmentpaas/psql
  dependencies:
    - "common_infrastructure"
  allow_failure: true
  script:
    - env
    - echo  "Database host is ${DB_HOST}""
    - psql -h ${DB_HOST} "port=5432 dbname=postgres sslmode=verify-full sslrootcert=backend/config/eu-west-2-bundle.pem user=db_user" < infrastructure/database/allow_iam_rds_access.sql

.deploy_infrastructure:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo  ${AWS_ACCESS_KEY_ID}
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform --version
    - terraform -chdir=infrastructure/${CI_ENVIRONMENT_NAME} init
    - terraform -chdir=infrastructure/${CI_ENVIRONMENT_NAME} validate
    - terraform -chdir=infrastructure/${CI_ENVIRONMENT_NAME} plan -out "planfile"
    - terraform -chdir=infrastructure/${CI_ENVIRONMENT_NAME} apply -input=false "planfile"

deploy_test_infrastructure:
  extends: ".deploy_infrastructure"
  stage: end_to_end_test
  dependencies:
    - common_infrastructure
    - build_test_frontend
    - build_backend
  environment:
    name: test

deploy_production_infrastucture:
  extends: ".deploy_infrastructure"
  stage: production_infrastructure
  dependencies:
    - common_infrastructure
    - build_prod_frontend
    - build_backend
  environment:
    name: production

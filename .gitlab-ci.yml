variables:
  NODE_VERSION: "gallium"

stages:
  - build
  - test
  - common_infra_deploy
  - end_to_end_test
  - infrastructure
  - deploy

build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  script:
    - echo "Building"
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/

test:
  needs: []
  image: node:${NODE_VERSION}-alpine
  variables:
    CI: "true"
  stage: test
  script:
    - npm ci
    - npm run test-ci
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  after_script:
    - echo "Test report available here - https://gitlab.com/joe.darling/footprint/-/jobs/$CI_JOB_ID/artifacts/frontend/coverage/lcov-report/index.html"
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - coverage/
    reports:
      junit: coverage/junit.xml

#testing_infrastucture:
  stage: end_to_end_test
  dependencies:
    - "build"
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo  ${AWS_ACCESS_KEY_ID}
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform --version
    - terraform -chdir=infrastructure/test init
    - terraform -chdir=infrastructure/test validate
    - terraform -chdir=infrastructure/test plan -out "planfile" 
    - terraform -chdir=infrastructure/test apply -input=false "planfile" 

#deploy_to_test:
#  stage: deploy
#  image:
#    name: amazon/aws-cli
#    entrypoint: [""]
#  script:
#    - aws --version
#    - aws s3 sync build s3://$S3_BUCKET --exclude index.html
#    - aws s3 sync build s3://$S3_BUCKET --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache

deploy_to_production:
  stage: deploy
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  script:
    - aws --version
    - aws s3 sync build s3://$S3_BUCKET --exclude index.html
    - aws s3 sync build s3://$S3_BUCKET --exclude "*" --include index.html --metadata-directive REPLACE --cache-control no-cache

common_infrastucture:
  stage: common_infra_deploy
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo  ${AWS_ACCESS_KEY_ID}
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform --version
    - terraform -chdir=infrastructure/common init
    - terraform -chdir=infrastructure/common validate
    - terraform -chdir=infrastructure/common plan -out "planfile"
    - terraform -chdir=infrastructure/common apply -input=false "planfile"

infrastucture:
  stage: infrastructure
  dependencies:
    - "build"
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  script:
    - echo  ${AWS_ACCESS_KEY_ID}
    - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
    - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    - terraform --version
    - terraform -chdir=infrastructure/production init
    - terraform -chdir=infrastructure/production validate
    - terraform -chdir=infrastructure/production plan -out "planfile"
    - terraform -chdir=infrastructure/production apply -input=false "planfile"
